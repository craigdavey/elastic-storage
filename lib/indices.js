// Generated by CoffeeScript 1.3.3
(function() {

  module.exports = {
    init: function(address, callback) {
      if (callback == null) {
        callback = this.defaultCallback;
      }
      return this.request("PUT", {
        path: address,
        done: function(error, output, response, request) {
          return callback(error, void 0, response, request);
        }
      });
    },
    drop: function(address, callback) {
      if (callback == null) {
        callback = this.defaultCallback;
      }
      if (address.trim() === "") {
        return callback(new Error("ElasticStorage::drop received a blank address. Use the \"_all\" \nindex if you really want to erase all of your indices."));
      } else {
        return this.request("DELETE", {
          path: address,
          done: function(error, output, response, request) {
            return callback(error, void 0, response, request);
          }
        });
      }
    },
    refresh: function(address, callback) {
      if (callback == null) {
        callback = this.defaultCallback;
      }
      return this.request("POST", {
        path: "" + address + "/_refresh",
        done: function(error, output, response, request) {
          return callback(error, void 0, response, request);
        }
      });
    },
    has: function(address, callback) {
      if (callback == null) {
        callback = this.defaultCallback;
      }
      return this.request("HEAD", {
        path: address,
        done: function(error, output, response, request) {
          var exists;
          if ((error != null ? error.code : void 0) === 404) {
            exists = false;
            error = void 0;
          } else {
            exists = (response != null ? response.statusCode : void 0) === 200;
          }
          return callback(error, exists, response, request);
        }
      });
    },
    fetchIndices: function(callback) {
      if (callback == null) {
        callback = this.defaultCallback;
      }
      return this.request("GET", {
        path: "_aliases",
        done: function(error, output, response, request) {
          var id, indices, value;
          indices = (function() {
            var _results;
            if (output) {
              _results = [];
              for (id in output) {
                value = output[id];
                _results.push({
                  id: id,
                  alias: Object.keys(value.aliases)[0]
                });
              }
              return _results;
            }
          })();
          if (indices) {
            indices.sort(function(a, b) {
              return a.id > b.id;
            });
          }
          return callback(error, indices, response, request);
        }
      });
    }
  };

}).call(this);
