// Generated by CoffeeScript 1.3.3
(function() {
  var ElasticStorage, HTTP, extend;

  HTTP = require("http");

  extend = require("underscore").extend;

  ElasticStorage = (function() {

    module.exports = ElasticStorage;

    ElasticStorage.prototype.host = "localhost";

    ElasticStorage.prototype.port = 9200;

    ElasticStorage.prototype.timeout = 0;

    function ElasticStorage(options) {
      if (options == null) {
        options = {};
      }
      extend(this, options);
    }

    extend(ElasticStorage.prototype, require("./core"));

    extend(ElasticStorage.prototype, require("./crud"));

    extend(ElasticStorage.prototype, require("./indices"));

    extend(ElasticStorage.prototype, require("./aliases"));

    extend(ElasticStorage.prototype, require("./scan"));

    extend(ElasticStorage, require("./backbone_sync"));

    ElasticStorage.prototype.request = function(method, options) {
      var body, done, path, request,
        _this = this;
      if (options == null) {
        options = {};
      }
      console.info("request");
      path = options.path, body = options.body, done = options.done;
      request = HTTP.request({
        method: method,
        path: path,
        host: this.host,
        port: this.port
      });
      request.setHeader("accept", "application/json");
      if (typeof body === "object") {
        body = JSON.stringify(body);
      }
      if (body) {
        request.write(body);
      }
      request.setTimeout(this.timeout, function() {
        request.exceededTimeLimit = true;
        return request.abort();
      });
      request.on("error", function(error) {
        console.error(error);
        if (request.exceededTimeLimit) {
          error.message = "Timeout occured after " + _this.timeout + "ms — " + error.message;
        }
        switch (error.code) {
          case "ECONNREFUSED":
          case "ECONNRESET":
            error = _this.ConnectionError(error);
            return done(error, void 0, void 0, request);
          default:
            throw _this.UnexpectedError(error);
        }
      });
      request.on("response", function(response) {
        var buffer;
        buffer = new Buffer(0);
        response.on("data", function(data) {
          return buffer = Buffer.concat([buffer, data]);
        });
        return response.on("end", function() {
          var error, output;
          if (response.headers["content-type"].split(";")[0] === "application/json") {
            output = buffer.length === 0 ? {} : JSON.parse(buffer.toString());
          } else {
            if (response.statusCode >= 400) {
              output = {
                error: buffer.toString()
              };
            }
          }
          if (response.statusCode < 400) {
            return done(void 0, output, response, request);
          } else {
            error = _this.ResponseError(output.error, response.statusCode);
            console.error(error);
            return done(error, void 0, response, request);
          }
        });
      });
      request.end();
      return "" + request.method + " /" + request.path;
    };

    ElasticStorage.prototype.ConnectionError = function(originalError) {
      var error, intro;
      intro = "ElasticStorage can’t connect to http://" + this.host + ":" + this.port + "/";
      error = new Error("" + intro + " — " + originalError.message);
      error.code = originalError.code;
      error.syscall = originalError.syscall;
      return error;
    };

    ElasticStorage.prototype.UnexpectedError = function(originalError) {
      var error, intro;
      intro = "Unexpected error occured";
      error = new Error("" + intro + " — " + originalError.message);
      error.code = originalError.code;
      error.syscall = originalError.syscall;
      return error;
    };

    ElasticStorage.prototype.ResponseError = function(message, code) {
      var error;
      error = new Error(message);
      error.code = code;
      return error;
    };

    ElasticStorage.prototype.defaultCallback = function(error, output, response, request) {
      var status;
      status = response ? HTTP.STATUS_CODES[response.statusCode] : response;
      console.info(status);
      if (output) {
        console.info(output);
      }
      if (error) {
        return console.error(error);
      }
    };

    return ElasticStorage;

  })();

}).call(this);
