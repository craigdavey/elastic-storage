// Generated by CoffeeScript 1.10.0
(function() {
  var Scan, extend, waterfall,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  extend = require("underscore").extend;

  waterfall = require("async").waterfall;

  exports.scan = function(address, options) {
    if (options == null) {
      options = {};
    }
    return new Scan(this, address, options);
  };

  Scan = (function() {
    Scan.prototype.size = 10;

    Scan.prototype.total = 0;

    function Scan(storage, path, options) {
      this.storage = storage;
      this.path = path;
      if (options == null) {
        options = {};
      }
      this.done = bind(this.done, this);
      extend(this, options);
      waterfall([
        (function(_this) {
          return function(ƒ) {
            return _this.getFirstScrollId(ƒ);
          };
        })(this), (function(_this) {
          return function(scrollId, ƒ) {
            return _this.processDocs(scrollId, ƒ);
          };
        })(this)
      ], this.done);
    }

    Scan.prototype.forEach = function(doc) {
      return console.log(doc["_type"] + "/" + doc["_id"]);
    };

    Scan.prototype.done = function(error, total) {
      if (error != null) {
        console.error(error);
      }
      return console.log("Finished scan of " + total + " docs.");
    };

    Scan.prototype.getFirstScrollId = function(callback) {
      return this.storage.request({
        method: "POST",
        path: this.path + "/_search?search_type=scan&scroll=10m&size=" + this.size,
        done: function(error, response) {
          return callback(error, response["_scroll_id"]);
        }
      });
    };

    Scan.prototype.processDocs = function(scrollId, callback) {
      return this.storage.request({
        method: "POST",
        path: "/_search/scroll?scroll=10m",
        body: scrollId,
        done: (function(_this) {
          return function(error, response) {
            var doc, hits, i, len;
            hits = response != null ? response["hits"]["hits"] : void 0;
            scrollId = response != null ? response["_scroll_id"] : void 0;
            if (hits.length > 0) {
              _this.total = _this.total + hits.length;
              for (i = 0, len = hits.length; i < len; i++) {
                doc = hits[i];
                _this.forEach(doc);
              }
            }
            if ((scrollId != null) && hits.length !== 0) {
              return _this.processDocs(scrollId, callback);
            } else {
              return callback(error, _this.total);
            }
          };
        })(this)
      });
    };

    return Scan;

  })();

}).call(this);
