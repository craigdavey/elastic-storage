// Generated by CoffeeScript 1.10.0
(function() {
  var extend;

  extend = require("underscore").extend;

  module.exports = {
    create: function(address, attributes, callback) {
      if (callback == null) {
        callback = this.defaultCallback;
      }
      attributes["created_at"] = "now";
      attributes["updated_at"] = "now";
      this.setTime(attributes);
      return this.request("POST", {
        path: address,
        body: attributes,
        done: (function(_this) {
          return function(error, output, response, request) {
            if (output) {
              return _this.read(address + "/" + output._id, callback);
            } else {
              return callback(error, void 0, response, request);
            }
          };
        })(this)
      });
    },
    read: function(address, criteria, callback) {
      if (callback == null) {
        callback = this.defaultCallback;
      }
      if (criteria instanceof Function) {
        callback = criteria;
        criteria = void 0;
      }
      if (address.match(this.RECORD_ADDRESS_PATTERN)) {
        return this.request("GET", {
          path: address,
          done: function(error, output, response, request) {
            var record;
            record = output ? extend({
              id: output._id
            }, output._source) : void 0;
            return callback(error, record, response, request);
          }
        });
      } else {
        return this.request("POST", {
          path: address + "/_search",
          body: criteria,
          done: function(error, output, response, request) {
            var _id, _source, records;
            records = (function() {
              var i, len, ref, ref1, results;
              if (output) {
                ref = output.hits.hits;
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  ref1 = ref[i], _id = ref1._id, _source = ref1._source;
                  results.push(extend({
                    id: _id
                  }, _source));
                }
                return results;
              }
            })();
            return callback(error, records, response, request);
          }
        });
      }
    },
    update: function(address, attributes, callback) {
      if (callback == null) {
        callback = this.defaultCallback;
      }
      attributes["updated_at"] = "now";
      this.setTime(attributes);
      return this.request("PUT", {
        path: address,
        body: attributes,
        done: (function(_this) {
          return function(error, output, response, request) {
            if (error === void 0) {
              return _this.read(address, callback);
            } else {
              return callback(error, void 0, response, request);
            }
          };
        })(this)
      });
    },
    "delete": function(address, callback) {
      if (callback == null) {
        callback = this.defaultCallback;
      }
      callback = arguments[2] || callback;
      if (address.trim() === "") {
        return callback(new Error("ElasticStorage::delete received a blank address. Refused to send a \nDELETE request because it could erase all your indices."));
      } else {
        return this.request("DELETE", {
          path: address,
          done: function(error, output, response, request) {
            return callback(error, void 0, response, request);
          }
        });
      }
    },
    RECORD_ADDRESS_PATTERN: /^[a-zA-Z0-9_-]+\/[a-zA-Z0-9_-]+\/[a-zA-Z0-9_-]+$/,
    TIME_ATTRIBUTE_PATTERN: /^[a-z_]+_at$/,
    setTime: function(attributes) {
      var name, pattern, results, timestamp, value;
      pattern = this.TIME_ATTRIBUTE_PATTERN;
      timestamp = (new Date).toJSON();
      results = [];
      for (name in attributes) {
        value = attributes[name];
        if (name.match(pattern) && value === "now") {
          results.push(attributes[name] = timestamp);
        }
      }
      return results;
    }
  };

}).call(this);
